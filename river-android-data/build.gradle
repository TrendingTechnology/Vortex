
/**
 *    Copyright [2019] [Yazan Tarifi]
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

apply plugin: Plugins.AndroidLibraryPlugin
apply plugin: Plugins.AndroidKotlinPlugin
apply plugin: Plugins.AndroidKotlinExtentions
apply plugin: Plugins.AndroidMavenPlugin
apply plugin: Plugins.Bintray

android {
    compileSdkVersion RiverAndroidDeps.CompileSdkV


    defaultConfig {
        minSdkVersion RiverAndroidDeps.MinSdkV
        targetSdkVersion RiverAndroidDeps.CompileSdkV
        versionCode RiverAndroidDeps.VersionCode
        versionName RiverAndroidDeps.VersionName

        testInstrumentationRunner RiverAndroidDeps.TestRunner

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    configuration ->
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation project(":river-base")
        testImplementation RiverAndroidDeps.Junit
        androidTestImplementation RiverAndroidDeps.Runner
        androidTestImplementation RiverAndroidDeps.Esspresso
        networkConfiguration(configuration)
        roomConfiguration(configuration)
}

private void networkConfiguration(configuration) {
    configuration.implementation RiverAndroidData.Retrofit
    configuration.implementation RiverAndroidData.RetrofitLogging
    configuration.implementation RiverAndroidData.RetrofitGsonConverter
    configuration.implementation RiverAndroidData.RetrofitRxJavaAdapter
    configuration.implementation RiverAndroidData.RxAndroid
}

private void roomConfiguration(configuration) {
    configuration.implementation RiverAndroidData.RoomCommon
    configuration.implementation RiverAndroidData.RoomRxJava2
    configuration.annotationProcessor RiverAndroidData.RoomCompiler
}


ext {
    packageName = "river-android-data-ktx"
    artifactId = "river-android-data-ktx"
    artifact = "$buildDir/outputs/aar/river-android-data-ktx-${RiverVersion}.arr"
    Description = "Android Data Layer For Save Data in Offline and Online"
}


group = rootProject.ext.RiverGroup
version = rootProject.ext.RiverVersion

install {
    repositories.mavenInstaller {
        pom.project {
            packaging rootProject.ext.PackagingType
            name rootProject.ext.LibraryName
            description rootProject.ext.Description
            url rootProject.ext.GithubUrl

            artifactId "river-android-data-ktx"
            groupId rootProject.ext.RiverGroup
            version rootProject.ext.RiverVersion

            licenses {

                license {
                    name rootProject.ext.licenseName
                    url rootProject.ext.licenseUrl
                    distribution rootProject.ext.distribution
                }
            }

            scm {
                connection rootProject.ext.GitUrl
                url rootProject.ext.GithubUrl
            }

            developers {

                developer {
                    id rootProject.ext.DeveloperID
                    name rootProject.ext.DeveloperName
                    email rootProject.ext.DeveloperEmail
                }

            }

        }
    }
}

bintray {

    user = "${rootProject.ext.bintrayUsername}"
    key = "${rootProject.ext.bintrayApiKey}"

    configurations = ['archives']
    publications = ['Production']

    publish = true

    pkg {
        repo = rootProject.ext.LibraryName
        name = "river-android-data-ktx"
        desc = rootProject.ext.Description

        dryRun = false
        publish = true
        override = true

        userOrg = user
        licenses = ["${rootProject.ext.licenseName}"]
        vcsUrl = rootProject.ext.GitUrl
        issueTrackerUrl = rootProject.ext.GithubIssuesUrl

        publicDownloadNumbers = true

    }
}

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/river-android-data-release.aar")
            groupId rootProject.ext.RiverGroup
            artifactId "river-android-data-ktx"
            version rootProject.ext.RiverVersion

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}



//apply from: rootProject.file("tools/BintrayAndroidConfigure.gradle")