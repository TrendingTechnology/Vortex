apply plugin: Plugins.AndroidLibraryPlugin
apply plugin: Plugins.AndroidKotlinPlugin
apply plugin: Plugins.AndroidKotlinExtentions
apply plugin: Plugins.AndroidMavenPlugin
apply plugin: Plugins.Bintray

android {
    compileSdkVersion VortexDetails.CompileSdkV


    defaultConfig {
        minSdkVersion VortexDetails.MinSdkV
        targetSdkVersion VortexDetails.CompileSdkV
        versionCode VortexDetails.VersionCode
        versionName VortexDetails.VersionName
        testInstrumentationRunner VortexDetails.TestRunner
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    configuration ->
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation project(":vortex")
        defaultConfiguration(configuration)
        dataConfiguration(configuration)
}

private void defaultConfiguration(config) {
    config.implementation VortexLibs.KotlinJdk
    config.implementation Vortex.RxJava
    config.implementation Vortex.RxAndroid
}

private void dataConfiguration(configuration) {
    configuration.implementation VortexLibs.Retrofit
    configuration.implementation VortexLibs.RetrofitLogging
    configuration.implementation VortexLibs.RetrofitGsonConverter
    configuration.implementation VortexLibs.RetrofitRxJavaAdapter
}


group = rootProject.ext.Group
version = rootProject.ext.Version

install {
    repositories.mavenInstaller {
        pom.project {
            packaging rootProject.ext.PackagingType
            name rootProject.ext.LibraryName
            description rootProject.ext.VortexDDescription
            url rootProject.ext.GithubUrl

            artifactId "${rootProject.ext.VortexD}"
            groupId rootProject.ext.Group
            version rootProject.ext.Version

            licenses {

                license {
                    name rootProject.ext.licenseName
                    url rootProject.ext.licenseUrl
                    distribution rootProject.ext.distribution
                }
            }

            scm {
                connection rootProject.ext.GitUrl
                url rootProject.ext.GithubUrl
            }

            developers {

                developer {
                    id rootProject.ext.DeveloperID
                    name rootProject.ext.DeveloperName
                    email rootProject.ext.DeveloperEmail
                }

            }

        }
    }
}

bintray {

    user = "${rootProject.ext.bintrayUsername}"
    key = "${rootProject.ext.bintrayApiKey}"

    configurations = ['archives']
    publications = ['Production']

    publish = true

    pkg {
        repo = rootProject.ext.LibraryName
        name = "${rootProject.ext.VortexD}"
        desc = "${rootProject.ext.VortexDDescription}"

        dryRun = false
        publish = true
        override = true

        userOrg = user
        licenses = ["${rootProject.ext.licenseName}"]
        vcsUrl = rootProject.ext.GitUrl
        issueTrackerUrl = rootProject.ext.GithubIssuesUrl

        publicDownloadNumbers = true

    }
}

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/vortex-data-release.aar")
            groupId rootProject.ext.Group
            artifactId "${rootProject.ext.VortexD}"
            version rootProject.ext.Version

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}
