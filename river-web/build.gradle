/**
 *    Copyright [2019] [Yazan Tarifi]
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

apply plugin: "${Plugins.SpringBootPlugin}"
apply plugin: "${Plugins.JavaLibraryPlugin}"
apply plugin: "${Plugins.SpringBootPluginmanagment}"
//apply plugin: Plugins.KotlinPlugin
apply plugin: "${Plugins.Maven}"
apply plugin: "${Plugins.Bintray}"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
}

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

dependencies {
    implementation project(":river-base")

    rootProject.SpringConfigurationsStarter.each {
        add(it.configuration, it.dependency)
    }

    rootProject.SpringDataConfigurationStarter.each {
        add(it.configuration, it.dependency)
    }

}

configurations {
    provided.all*.exclude group: 'javax.servlet'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

bootJar {
    manifest {
        attributes 'Start-Class': 'com.yazan98.river.web.WebStarter'
    }
}


jar {
    manifest {
        attributes 'Main-Class': 'com.yazan98.river.web.WebStarter'
    }
}


group = rootProject.ext.RiverGroup
version = rootProject.ext.RiverVersion

install {
    repositories.mavenInstaller {
        pom.project {
            packaging rootProject.ext.PackagingType
            name rootProject.ext.LibraryName
            description rootProject.ext.Description
            url rootProject.ext.GithubUrl

            artifactId "river-web-ktx"
            groupId rootProject.ext.RiverGroup
            version rootProject.ext.RiverVersion

            licenses {

                license {
                    name rootProject.ext.licenseName
                    url rootProject.ext.licenseUrl
                    distribution rootProject.ext.distribution
                }
            }

            scm {
                connection rootProject.ext.GitUrl
                url rootProject.ext.GithubUrl
            }

            developers {

                developer {
                    id rootProject.ext.DeveloperID
                    name rootProject.ext.DeveloperName
                    email rootProject.ext.DeveloperEmail
                }

            }

        }
    }
}


bintray {

    user = "${rootProject.ext.bintrayUsername}"
    key = "${rootProject.ext.bintrayApiKey}"

    configurations = ['archives']
    publications = ['Production']

    publish = true

    pkg {
        repo = rootProject.ext.LibraryName
        name = "river-web-ktx"
        desc = rootProject.ext.Description

        dryRun = false
        publish = true
        override = true

        userOrg = user
        licenses = ["${rootProject.ext.licenseName}"]
        vcsUrl = rootProject.ext.GitUrl
        issueTrackerUrl = rootProject.ext.GithubIssuesUrl

        publicDownloadNumbers = true

    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/libs/river-web-${rootProject.ext.RiverVersion}.jar")
            groupId rootProject.ext.RiverGroup
            artifactId "river-web-ktx"
            version rootProject.ext.RiverVersion

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}
